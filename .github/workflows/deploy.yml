
name: kibana install & then Uninstall
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  update_packages_test:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Uninstall the old packages
        run: |
          echo "${{ secrets.SSH_KEY }}" > ssh_file.pem
          cat ssh_file.pem
          chmod 600 ssh_file.pem
          ssh -i ssh_file.pem -o StrictHostKeyChecking=no ${{ secrets.USER_NAME }}@${{ secrets.HOST_NAME }} 'bash -s' < ./uninstall.sh
      - name: Installing new packages
        run: |
          echo "${{ secrets.SSH_KEY }}" > ssh_file.pem
          chmod 600 ssh_file.pem
          ssh -i ssh_file.pem -o StrictHostKeyChecking=no ${{ secrets.USER_NAME }}@${{ secrets.HOST_NAME }} 'bash -s' < ./install.sh
      # - name: Verify the Package
      #   run: |
      #     eecho "${{ secrets.SSH_KEY }}" > ssh_file.pem
      #     chmod 600 ssh_file.pe
      #     ssh -i ssh_file.pem -o StrictHostKeyChecking=no ${{ secrets.USER_NAME }}@${{ secrets.HOST_NAME }} 'bash -s' < ./verify.sh
  
  update_packages_qa:
    needs: update_packages_test
    runs-on: ubuntu-latest
    environment: qa
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Uninstall the old packages
        run: |
          echo "${{ secrets.SSH_KEY_QA }}" > ssh_file.pem
          cat ssh_file.pem
          chmod 600 ssh_file.pem
          ssh -i ssh_file.pem -o StrictHostKeyChecking=no ${{ secrets.USER_NAME }}@${{ secrets.HOST_NAME }} 'bash -s' < ./uninstall.sh
      - name: Installing new packages
        run: |
          echo "${{ secrets.SSH_KEY_QA }}" > ssh_file.pem
          chmod 600 ssh_file.pem
          ssh -i ssh_file.pem -o StrictHostKeyChecking=no ${{ secrets.USER_NAME }}@${{ secrets.HOST_NAME }} 'bash -s' < ./install.sh
      # - name: Verify the Package
      #   run: |
      #     eecho "${{ secrets.SSH_KEY_QA }}" > ssh_file.pem
      #     chmod 600 ssh_file.pem
      #     ssh -i ssh_file.pem -o StrictHostKeyChecking=no ${{ secrets.USER_NAME }}@${{ secrets.HOST_NAME }} 'bash -s' < ./verify.sh    
