
name: kibana install & then Uninstall
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  update_packages_test:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Uninstall the old packages
        env: 
          HOST_NAME_TEST: ${ { var.HOST_NAME_TEST } }
          USER_NAME_TEST: ${ { var.USER_NAME_TEST } }

        run: |
          echo "${{ secrets.SSH_KEY }}" > ssh_file.pem
          cat ssh_file.pem
          chmod 600 ssh_file.pem
          ssh -i ssh_file.pem -o StrictHostKeyChecking=no $USER_NAME_TEST@$HOST_NAME_TEST 'bash -s' < ./uninstall.sh
      - name: Installing new packages
        run: |
          echo "${{ secrets.SSH_KEY }}" > ssh_file.pem
          chmod 600 ssh_file.pem
          ssh -i ssh_file.pem -o StrictHostKeyChecking=no $USER_NAME_TEST@$HOST_NAME_TEST 'bash -s' < ./install.sh
      # - name: Verify the Package
      #   run: |
      #     eecho "${{ secrets.SSH_KEY }}" > ssh_file.pem
      #     chmod 600 ssh_file.pe
      #     ssh -i ssh_file.pem -o StrictHostKeyChecking=no { { env.USER_NAME_TEST } }@${ { env.HOST_NAME_TEST } } 'bash -s' < ./verify.sh
  
  # update_packages_qa:
  #   runs-on: ubuntu-latest
  #   environment: qa
  #   # env: # Or as an environment variable
  #   #   SSH_KEY: ${{ env.PAPI_KEY }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Uninstall the old packages
  #       # env: # Or as an environment variable
  #       #  SSH_KEY: ${{ env.PAPI_KEY }}
  #       run: |
  #         echo "${{ secrets.SSH_KEY_QA }}" > ssh_file.pem
  #         cat ssh_file.pem
  #         chmod 600 ssh_file.pem
  #         ssh -i ssh_file.pem -o StrictHostKeyChecking=no { { env.USER_NAME_QA } }@${ { env.HOST_NAME_QA } } 'bash -s' < ./uninstall.sh
  #     - name: Installing new packages
  #       run: |
  #         echo "${{ secrets.SSH_KEY }}" > ssh_file.pem
  #         chmod 600 ssh_file.pem
  #         ssh -i ssh_file.pem -o StrictHostKeyChecking=no { { env.USER_NAME_QA } }@${ { env.HOST_NAME_QA } } 'bash -s' < ./install.sh
  #     # - name: Verify the Package
  #     #   run: |
  #     #     eecho "${{ secrets.SSH_KEY }}" > ssh_file.pem
  #     #     chmod 600 ssh_file.pem
  #     #     ssh -i ssh_file.pem -o StrictHostKeyChecking=no { { env.USER_NAME_QA } }@${ { env.HOST_NAME_QA } } 'bash -s' < ./verify.sh    
